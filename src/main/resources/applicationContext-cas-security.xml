<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/favicon.ico" security="none" />
	<security:http pattern="/login.jsp" security="none" />
	<security:http pattern="/login/getvalidcode.*" security="none" />
	<security:http pattern="/jsconfig/**" security="none" />
	<!-- 对其他功能监控 -->
	<security:http pattern="/**" entry-point-ref="casEntryPoint"
		access-decision-manager-ref="voteAccessDecisionManagerBean"
		authentication-manager-ref="casAuthenticationManager" name="admin"
		use-expressions="true">
		<security:custom-filter ref="casFilter"
			position="FORM_LOGIN_FILTER" />
		<security:csrf disabled="true" />
		<security:headers>
			<security:frame-options policy="SAMEORIGIN" />
		</security:headers>
		<security:intercept-url pattern="/admin/**"
			access="isFullyAuthenticated()" />
		<security:intercept-url pattern="/main/**"
			access="isFullyAuthenticated()" />
		<security:intercept-url pattern="/test/**"
			access="isFullyAuthenticated()" />
		<security:intercept-url pattern="/system/**"
			access="isFullyAuthenticated()" />
		<security:custom-filter ref="requestSingleLogoutFilter"
			before="LOGOUT_FILTER" />
		<security:custom-filter ref="singleLogoutFilter"
			before="CAS_FILTER" />
	</security:http>
	
	<bean id="encryptAndDecrypt" class="com.asiainfo.ewebframe.security.DESEncryptAndDecrypt">
		<constructor-arg>
			<value>asiainfo</value>
		</constructor-arg>
	</bean>
	
	<!-- 管理员登录入口 -->
	<bean id="casEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<!-- 配置cas 服务登陆地址 -->
		<property name="loginUrl" value="${cas.serverUrlPrefix}/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<!-- 配置cas 服务认证成功以后回掉地址次地址跟 casFilter 中的 filterProcessesUrl 地址要一致 -->
		<property name="service"
			value="${cas.redirectaddr}/portal/login/login.jhtml" />
	</bean>
	<bean id="casFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="casAuthenticationManager" />
		<property name="authenticationFailureHandler" ref="authenticationFailerHandler" />
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<!-- Sets the URL that determines if authentication is required 此地址跟 上面 
			serviceProperties.service 保持一致 -->
		<property name="filterProcessesUrl" value="/login/login.jhtml" />
	</bean>
	<!-- 登录失败 -->
	<bean id="authenticationFailerHandler"
		class="com.asiainfo.ewebframe.security.auth.AuthenticationFailerHandler">
		<property name="defaultFailureUrl" value="${cas.serverUrlPrefix}/login" />
	</bean>

	<!-- 管理员用户认证服务 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="daoAuthenticationProvider">
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider"
		class="com.asiainfo.ewebframe.security.auth.UserInfoAuthenticationProvider">
		<property name="hideUserNotFoundExceptions" value="false" />
		<property name="userDetailsService" ref="userDetailInfoService" />
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="saltSource" ref="saltSource" />

	</bean>

	<security:authentication-manager alias="casAuthenticationManager">
		<security:authentication-provider
			ref="casAuthenticationProvider">
		</security:authentication-provider>
	</security:authentication-manager>
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService">
			<bean
				class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<constructor-arg ref="userDetailInfoService" />
			</bean>
		</property>
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0"
					value="${cas.validateServerUrlPrefix}" />
				<property name="encoding" value="utf-8" />
			</bean>
		</property>
		<property name="key" value="key4CasAuthenticationProvider" />
	</bean>

	<!-- 加密组件 -->
	<bean id="passwordEncoder"
		class="com.asiainfo.ewebframe.security.EncryptorPasswordEncoder">
		<property name="encryptor" ref="encryptor" />
	</bean>
	<bean id="encryptor" class="com.asiainfo.eframe.util.Encryptor">
	</bean>
	<!-- 配置加密盐值 -->
	<bean id="saltSource"
		class="org.springframework.security.authentication.dao.SystemWideSaltSource">
		<property name="systemWideSalt" value="00linkage" />
	</bean>
	<bean id="userExtraInfoHelper"
		class="com.asiainfo.ewebframe.security.auth.DefaultUserExtraInfoHelper">
		<constructor-arg index="0" ref="sqlSession">
		</constructor-arg>
	</bean>
	<bean id="authDaoImpl"
		class="com.asiainfo.ewebframe.security.auth.DefaultAuthInfoProvider">
		<property name="userExtraInfoHelper" ref="userExtraInfoHelper" />
		<property name="sqlSession" ref="sqlSession" />
	</bean>

	<bean id="userDetailInfoService"
		class="com.asiainfo.ewebframe.security.auth.userdetails.UserDetailInfoService">
		<property name="authInfoProvider" ref="authDaoImpl"></property>
	</bean>
	<!-- 授权控制 -->
	<bean id="userAccessDecisionManagerBean"
		class="com.asiainfo.ewebframe.security.auth.AccessDecisionService">
	</bean>
	<!-- 管理员登录成功 -->

	<bean id="authenticationSuccessHandler"
		class="com.asiainfo.ewebframe.security.auth.LoginSuccessHandler">
		<property name="defaultTargetUrl" value="/main/index.jhtml"></property>
	</bean>
	<security:global-method-security
		pre-post-annotations="enabled" />

	<bean id="voteAccessDecisionManagerBean"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg index="0" ref="decisionVoters" />
		<property name="allowIfAllAbstainDecisions" value="false" />
	</bean>
	<util:list id="decisionVoters">
		<bean class="com.asiainfo.ewebframe.security.auth.voter.UserRoleVoter">
			<property name="authDaoImpl" ref="authDaoImpl" />
		</bean>
		<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
		<bean
			class="org.springframework.security.web.access.expression.WebExpressionVoter"
			id="expressionVoter">
			<property name="expressionHandler" ref="expressionHandler" />
		</bean>
	</util:list>

	<bean
		class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"
		id="expressionHandler" />
	<!-- 统一登出配置 -->
	<!-- This filter handles a Single Logout Request from the CAS Server -->

	<bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter">
	</bean>

	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		be performed -->
	<bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="${cas.serverUrlPrefix}/logout" />
		<constructor-arg>
			<bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</constructor-arg>
		<!-- <property name="filterProcessesUrl" value="login/tologin.jhtml" /> -->
	</bean>
</beans>